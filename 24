# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
# Определите максимальное количество идущих подряд символов, среди которых каждые два соседних различны.

# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать
# с помощью данного алгоритма.

f = open('fw/241.txt').readline()
c = 1
maxi = []
for i in range(len(f) - 1):
    if f[i] != f[i + 1]:
        c += 1
        maxi.append(c)
    else: 
        c = 1
print(max(maxi))


# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
#  Определите длину самой длинной последовательности, состоящей из символов Z.
#  Хотя бы один символ Z находится в последовательности.

f = open('fw/242.txt').readline()
c = 1
maxi = []
for i in range(0, len(f) - 1):
    if f[i] == f[i+1] == 'Z':
        c+=1
    else:
        maxi.append(c)
        c = 1
print(max(maxi))
    
'''Текстовый файл состоит из символов A, B и C.

Определите максимальное количество идущих подряд пар символов AB или CB в прилагаемом файле.

Искомая подпоследовательность должна состоять только из пар AB, или только из пар CB, или только из пар AB и CB в произвольном порядке следования этих пар.

Для выполнения этого задания следует написать программу.'''

f = open('fw/234.txt').readline()
c = 1
maxi = []
f = f.replace('AB', '*')
f = f.replace('CB', '*')
for i in range(len(f) - 1):
    if f[i] == '*' and f[i + 1] == '*':
        c += 1
        maxi.append(c)
    else:
        c = 1

print(max(maxi))
        

# Текстовый файл состоит не более чем из 106 символов арабских цифр (0, 1, ..., 9).
#  Определите максимальное количество идущих подряд цифр, расположенных в строгом убывающем порядке.

# Для выполнения этого задания следует написать программу.

f=open('fw/245.txt').readline()
maxi=count=1
for i in range(1,len(f)):
    if f[i-1] > f[i]:
        count+=1
    else:
        maxi=max(count,maxi)
        count=1
print(maxi)



# Текстовый файл состоит не более чем из 10**6 символов L, D и R.
# Определите максимальную длину цепочки вида LDRLDRLDR... 
# (составленной из фрагментов LDR, последний фрагмент может быть неполным).


f = 'LDRLDRLDRLDR'
c = 1
maxi = []
f = f.replace('LDR', 'X')

for i in range(len(f) - 1):
    if f[i] == 'X' or (f[i + 1] == 'X' or f[i + 1] == 'L' or f[i + 1] == 'LD'):
        c += 1
    else:
        maxi.append(c)
        c = 1
print(max(maxi) * 3)


# Текстовый файл состоит не более чем из 10**6 символов X, Y и Z.
# Определите максимальную длину цепочки вида XYZXYZXYZ... 
# (составленной из фрагментов XYZ, последний фрагмент может быть неполным).

# Для выполнения этого задания следует написать программу. Ниже приведён файл,
# который необходимо обработать с помощью данного алгоритма.


# f = open('fw/247.txt').readline()
# c = 0
# maxi = []
# f = f.replace('XYZ', '*')

# for i in range(len(f) - 1):
#     if f[i] == '*' or (f[i + 1] == '*' or f[i + 1] == 'Y' or f[i + 1] == 'YZ'):
#         c += 1
#         maxi.append(c)
#     else:
#         c = 0

# print(max(maxi))

# s = open('fw/247.txt').readline()
# k = 1
# mk = 0
# s = s.replace('XYZ','***')
# if '*X' in s:
#     s=s.replace('*X','**')
# for i in range(len(s)-1):
#     if s[i]=='*' and s[i+1]=='*':
#         k+=1
#         mk=max(mk,k)
#     else:
#         k=1
# print(mk)



# Текстовый файл состоит из символов P, Q, R и S.

# Определите максимальное количество идущих подряд символов в прилагаемом файле, среди которых нет идущих подряд символов P.

# Для выполнения этого задания следует написать программу.



f = open('fw/249.txt').readline()
c = 1
maxi = []
for i in range(len(f) - 1):
    if (f[i] != 'P' or f[i + 1] != 'P'):
        c += 1
        maxi.append(c)
    else:
        c = 1
    
print(max(maxi))

# Текстовый файл состоит не более чем из 10**6 символов A, B и C. Определите максимальное количество идущих подряд символов A.

# Для выполнения этого задания следует написать программу. Ниже приведён файл, который необходимо обработать с помощью данного алгоритма.

f = open('fw/250.txt').readline()
c = 1
maxx = []
for i in range(len(f) - 1):
    if f[i] == 'A' and f[i+1] == 'A':
        c += 1
        maxx.append(c)
    else:
        c = 1

print(max(maxx))
    